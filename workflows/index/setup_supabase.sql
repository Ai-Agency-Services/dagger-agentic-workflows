-- Run this in the Supabase SQL editor
create extension if not exists vector;

create table code_embeddings (
  id bigint generated by default as identity primary key,
  content text not null,
  embedding vector(1536), -- Adjust dimension to match your embedding model
  filepath text not null,
  start_line integer not null,
  end_line integer not null,
  language text not null,
  context text,
  symbols jsonb default '[]'::jsonb,
  created_at timestamp with time zone default now()
);

-- Create a function to search for similar embeddings
create or replace function match_code_embeddings(
  query_embedding vector(1536),
  match_threshold float,
  match_limit int
)
returns table (
  id bigint,
  content text,
  filepath text,
  start_line integer,
  end_line integer,
  language text,
  context text,
  symbols jsonb,
  similarity float
)
language plpgsql
as $$
begin
  return query
  select
    code_embeddings.id,
    code_embeddings.content,
    code_embeddings.filepath,
    code_embeddings.start_line,
    code_embeddings.end_line,
    code_embeddings.language,
    code_embeddings.context,
    code_embeddings.symbols,
    1 - (code_embeddings.embedding <=> query_embedding) as similarity
  from code_embeddings
  where 1 - (code_embeddings.embedding <=> query_embedding) > match_threshold
  order by code_embeddings.embedding <=> query_embedding
  limit match_limit;
end;
$$;

-- Create an index for faster similarity searches
create index on code_embeddings using ivfflat (embedding vector_cosine_ops)
with (lists = 100);