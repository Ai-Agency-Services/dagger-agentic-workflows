name: Smell Graph Report

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode: remote (clone by URL) or attached (use local checkout)"
        required: true
        default: "remote"
      target_repo_url:
        description: "Repository URL to analyze (remote mode)"
        required: false
      target_branch:
        description: "Branch to analyze (remote mode)"
        required: false
        default: "main"
      attached_repository:
        description: "owner/repo to checkout (attached mode)"
        required: false
      attached_ref:
        description: "Branch or SHA to checkout (attached mode)"
        required: false
        default: "main"
      attached_path:
        description: "Path to checkout attached repo"
        required: false
        default: "target-repo"
      post_comment:
        description: "Post PR comment with report (when on pull_request)"
        required: false
        default: "true"
      skip_graph:
        description: "Skip graph build and run smell only (workflow_dispatch only)"
        required: false
        default: "false"
      # NEW: severity gate input
      fail_on_severity:
        description: "Fail job when severity >= this level (none|high|critical)"
        required: false
        default: "none"

  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  smell-graph:
    runs-on: ubuntu-latest
    env:
      DAGGER_NO_NAG: '1'
      DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN || secrets.DAGGER_TOKEN }}
    steps:
      - name: Checkout this repository (workflow code)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: (Attached mode) Checkout target repository
        if: ${{ inputs.mode == 'attached' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.attached_repository || format('{0}/{1}', github.repository_owner, github.event.pull_request.head.repo.name) }}
          ref: ${{ inputs.attached_ref || github.event.pull_request.head.ref }}
          path: ${{ inputs.attached_path }}
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=v0.18.19 sh
          echo "$PWD/bin" >> $GITHUB_PATH

      - name: Verify tools
        run: |
          dagger version
          uv --version

      - name: Verify Dagger Cloud token
        run: |
          if [ -z "${DAGGER_CLOUD_TOKEN}" ]; then
            echo "DAGGER_CLOUD_TOKEN is not set. Please set repo secret DAGGER_CLOUD_TOKEN (or DAGGER_TOKEN)." >&2
            exit 1
          else
            echo "Dagger Cloud token detected (masked)"
          fi

      - name: Build Graph (remote mode)
        if: ${{ inputs.mode != 'attached' && inputs.skip_graph != 'true' }}
        env:
          GH_PAT: ${{ secrets.GH_PAT || github.token }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        working-directory: workflows/graph
        run: |
          echo "CWD=$(pwd)" && ls -la
          test -f "$GITHUB_WORKSPACE/workflows/graph/dagger.json" && echo "Found graph dagger.json" || (echo "Missing graph dagger.json" && exit 1)
          dagger call --cloud --mod $GITHUB_WORKSPACE/workflows/graph \
            --config-file=demo/agencyservices.yaml \
            --neo-data=./tmp/neo4j-data \
            build-graph-for-repository \
            --github-access-token=env:GH_PAT \
            --repository-url="${{ inputs.target_repo_url || github.event.pull_request.head.repo.clone_url }}" \
            --branch="${{ inputs.target_branch || github.event.pull_request.head.ref }}" \
            --neo-password=env:NEO4J_PASSWORD \
            --neo-auth=env:NEO4J_AUTH \
            --open-router-api-key=env:OPENROUTER_API_KEY

          echo "GRAPH_BUILT=1" >> "$GITHUB_ENV"

      - name: Build Graph (attached mode)
        if: ${{ inputs.mode == 'attached' && inputs.skip_graph != 'true' }}
        env:
          GH_PAT: ${{ secrets.GH_PAT || github.token }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        working-directory: workflows/graph
        run: |
          echo "CWD=$(pwd)" && ls -la
          test -f "$GITHUB_WORKSPACE/workflows/graph/dagger.json" && echo "Found graph dagger.json" || (echo "Missing graph dagger.json" && exit 1)
          dagger call --cloud --mod $GITHUB_WORKSPACE/workflows/graph \
            --config-file=demo/agencyservices.yaml \
            --neo-data=./tmp/neo4j-data \
            build-graph-for-directory \
            --github-access-token=env:GH_PAT \
            --local-path="${{ github.workspace }}/${{ inputs.attached_path }}" \
            --neo-password=env:NEO4J_PASSWORD \
            --neo-auth=env:NEO4J_AUTH \
            --open-router-api-key=env:OPENROUTER_API_KEY

          echo "GRAPH_BUILT=1" >> "$GITHUB_ENV"

      - name: Analyze Smells (always-verbose report with links)
        id: smell
        if: ${{ env.GRAPH_BUILT == '1' || inputs.skip_graph == 'true' }}
        env:
          GITHUB_REPO_URL: ${{ inputs.mode == 'remote' && (inputs.target_repo_url || github.event.pull_request.head.repo.html_url) || (format('https://github.com/{0}', inputs.attached_repository) || github.event.pull_request.head.repo.html_url) }}
          GITHUB_BRANCH: ${{ inputs.mode == 'remote' && (inputs.target_branch || github.event.pull_request.head.ref) || (inputs.attached_ref || github.event.pull_request.head.ref) }}
          GH_PAT: ${{ secrets.GH_PAT || github.token }}
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        working-directory: workflows/smell
        run: |
          echo "CWD=$(pwd)" && ls -la
          test -f "$GITHUB_WORKSPACE/workflows/smell/dagger.json" && echo "Found smell dagger.json" || (echo "Missing smell dagger.json" && exit 1)

          # Export HTML report (pretty)
          dagger call --cloud --mod $GITHUB_WORKSPACE/workflows/smell \
            --config-file=demo/agencyservices.yaml \
            --neo-data=./tmp/neo4j-data \
            analyze-codebase-export \
            --github-access-token=env:GH_PAT \
            --neo-password=env:NEO4J_PASSWORD \
            --neo-auth=env:NEO4J_AUTH \
            --format html \
            export --path smell_report.html

          # Export text report (parsable for gating)
          dagger call --cloud --mod $GITHUB_WORKSPACE/workflows/smell \
            --config-file=demo/agencyservices.yaml \
            --neo-data=./tmp/neo4j-data \
            analyze-codebase-export \
            --github-access-token=env:GH_PAT \
            --neo-password=env:NEO4J_PASSWORD \
            --neo-auth=env:NEO4J_AUTH \
            --format text \
            export --path smell_report.txt

      - name: Verify Smell Report Path
        run: |
          test -f workflows/smell/smell_report.html && ls -lh workflows/smell/smell_report.html || (echo 'Report not found at workflows/smell/smell_report.html' && exit 1)
          test -f workflows/smell/smell_report.txt && ls -lh workflows/smell/smell_report.txt || (echo 'Report not found at workflows/smell/smell_report.txt' && exit 1)

      # NEW: Severity Gate (optional)
      - name: Severity Gate
        if: ${{ inputs.fail_on_severity && (inputs.fail_on_severity != 'none') }}
        run: |
          set -euo pipefail
          file="workflows/smell/smell_report.txt"
          # Extract counts from the Severity Breakdown in the text report
          # Expected lines like: "- CRITICAL: 2", "- HIGH: 3"
          critical=$(grep -A5 "Severity Breakdown:" "$file" | awk '/CRITICAL/ {print $2+0}' || true)
          high=$(grep -A5 "Severity Breakdown:" "$file" | awk '/HIGH/ {print $2+0}' || true)
          critical=${critical:-0}
          high=${high:-0}
          mode="${{ inputs.fail_on_severity }}"
          echo "Mode=$mode CRITICAL=$critical HIGH=$high"
          if [ "$mode" = "critical" ] && [ "$critical" -gt 0 ]; then
            echo "Failing: CRITICAL smells present: $critical"; exit 1; fi
          if [ "$mode" = "high" ] && { [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; }; then
            echo "Failing: HIGH/CRITICAL smells present: high=$high critical=$critical"; exit 1; fi
          echo "Severity gate passed."

      # NEW: Job Summary (Markdown)
      - name: Job Summary
        run: |
          {
            echo "# Code Smell Report"
            echo "- Repo: ${GITHUB_REPO_URL:-N/A}"
            echo "- Branch: ${GITHUB_BRANCH:-N/A}"
            echo "- Artifact: smell-report (HTML & text)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Smell Report
        uses: actions/upload-artifact@v4
        with:
          name: smell-report
          path: |
            workflows/smell/smell_report.html
            workflows/smell/smell_report.txt

      - name: Comment on PR with Smell Report
        if: ${{ github.event_name == 'pull_request' && inputs.post_comment == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `### Code Smell Report\n\nA full report (HTML and text) has been uploaded as the workflow artifact "smell-report".\n\n- Repo: ${process.env.GITHUB_REPO_URL || 'N/A'}\n- Branch: ${process.env.GITHUB_BRANCH || 'N/A'}\n- Run: ${runUrl}\n\nDownload the artifact from this run to view the report.`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
